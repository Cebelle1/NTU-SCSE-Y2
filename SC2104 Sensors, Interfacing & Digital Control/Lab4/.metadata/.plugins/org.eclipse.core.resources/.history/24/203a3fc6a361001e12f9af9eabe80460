/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "MPU6050.h"
#include "math.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
 I2C_HandleTypeDef hi2c2;

UART_HandleTypeDef huart3;

/* USER CODE BEGIN PV */
IMU_Data imu;

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_I2C2_Init(void);
static void MX_USART3_UART_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t IMU_ADDR = 0x68 <<1;

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_I2C2_Init();
  MX_USART3_UART_Init();
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  int i;
  uint8_t status = IMU_Initialise(&imu, &hi2c2, &huart3);
  char sbuf[10][15];

  float pitch_acc, roll_acc, yaw_acc;
  float pitch_gyro, roll_gyro, yaw_gyro, dt;

  uint32_t millisOld, millisNow;
  millisOld = HAL_GetTick();


  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	IMU_AccelRead(&imu);
	IMU_GyroRead(&imu);

	//Before convert
	//Gives +ve, -ve, +ve (Y AXIS -ve OF BOARD)
	/*for(i=0; i<3; i++){
		//sprintf(sbuf, "%7.2f ", imu.acc[i]);
		sprintf(sbuf, "%7.2f", imu.gyro[i]);
		HAL_UART_Transmit(&huart3, sbuf,8, HAL_MAX_DELAY);
	}
	HAL_UART_Transmit(&huart3, "\r\n", 2, HAL_MAX_DELAY);
	HAL_Delay(1000);*/

	//Adjusted Accelerometer
	roll_acc = atan2(imu.acc[1], imu.acc[2]);	//Roll on x axis, so arctan(y/z)
	pitch_acc = atan2(imu.acc[0], imu.acc[2]);	//Pitch on y axis, so arctan(x/z)
	pitch_acc = -pitch_acc * 57.3;				//+ve Y axis on board gives -ve reading so invert sign
	roll_acc = -roll_acc * 57.3;

	//Print Accelerometer
	/*sprintf(sbuf, "%7.2f,", roll_acc);
	HAL_UART_Transmit(&huart3, sbuf,8, HAL_MAX_DELAY);
	sprintf(sbuf, "%7.2f", pitch_acc);
	HAL_UART_Transmit(&huart3, sbuf,8, HAL_MAX_DELAY);
	HAL_UART_Transmit(&huart3, "\r\n", 2, HAL_MAX_DELAY);*/


	//Gyro

	millisNow = HAL_GetTick();
	dt = (millisNow - millisOld) * 0.001;
	millisOld = millisNow;

	roll_gyro = roll_gyro + imu.gyro[0] * dt;		//roll is on x axis
	pitch_gyro = pitch_gyro + imu.gyro[1] * dt;		//pitch is on y axis
	yaw_gyro = pitch_gyro + imu.gyro[2] *dt;		//yaw

	//put into +- 180deg
	roll_gyro = fmod(roll_gyro, 360);
	pitch_gyro = fmod(pitch_gyro,360);
	yaw_gyro = fmod(yaw_gyro, 360);

	//Print
	/*sprintf(sbuf, "%7.2f,", roll_gyro);
	HAL_UART_Transmit(&huart3, sbuf,8, HAL_MAX_DELAY);
	sprintf(sbuf, "%7.2f,", pitch_gyro);
	HAL_UART_Transmit(&huart3, sbuf,8, HAL_MAX_DELAY);
	sprintf(sbuf, "%7.2f,", yaw_gyro);
	HAL_UART_Transmit(&huart3, sbuf,8, HAL_MAX_DELAY);
	HAL_UART_Transmit(&huart3, "\r\n", 2, HAL_MAX_DELAY);*/

	//=========Complementary Filter============
	float alpha, roll_cf, pitch_cf;
	alpha = 0.9;
	roll_cf = (1-alpha)*roll_acc + alpha * (roll_gyro + imu.gyro[0] * dt);
	pitch_cf = (1-alpha)*pitch_acc + alpha * (pitch_gyro + imu.gyro[1] * dt);

	//Print CF
	printf(sbuf, "%7.2f,", roll_cf);
	HAL_UART_Transmit(&huart3, sbuf,8, HAL_MAX_DELAY);
	//sprintf(sbuf, "%7.2f,", pitch_cf);
	//HAL_UART_Transmit(&huart3, sbuf,8, HAL_MAX_DELAY);
	//sprintf(sbuf, "%7.2f,", yaw_gyro);
	//HAL_UART_Transmit(&huart3, sbuf,8, HAL_MAX_DELAY);
	HAL_UART_Transmit(&huart3, "\r\n", 2, HAL_MAX_DELAY);

	//===========Kalman Filter==============
	float roll_kf, pitch_kf, roll_kf_prev, pitch_kf_prev;
	float roll_g_var, pitch_g_var;
	float roll_a, pitch_a;
	float kg_roll, kg_pitch;
	int var_gyro = 16;
	int var_acc = 9;

	//1. Computer Process Estimation
	roll_kf = roll_kf + dt * imu.gyro[0];
	pitch_kf = pitch_kf + dt * imu.gyro[1];

	//2. Calculate variance
	roll_g_var = roll_g_var + (dt * dt * var_gyro);
	pitch_g_var = pitch_g_var + (dt * dt * var_gyro);

	//3. Kalman Gain (0 <= Gain <= 1)
	kg_roll = roll_g_var/(roll_g_var + var_acc);
	kg_pitch = pitch_g_var/(pitch_g_var + var_acc);

	//4. Obtain Measurements
	//Re-use accelerometer part

	//5. Calculate correct estimate
	//Largely base on gyro (KG ~0 VarEst<<VarMea)
	//Largely base on acc (KG ~ 1  VarEst>>VarMea)
	roll_kf = roll_kf + kg_roll*(roll_acc - roll_kf);
	pitch_kf = pitch_kf + kg_pitch * (pitch_acc - pitch_kf);

	//6. Calculate the uncertainty of the corrected
	roll_g_var = (1-kg_roll)*roll_g_var;
	pitch_g_var = (1-kg_pitch) * pitch_g_var;

	//Print KF
	printf(sbuf, "%7.2f,", roll_kf);
	HAL_UART_Transmit(&huart3, sbuf,8, HAL_MAX_DELAY);
	//sprintf(sbuf, "%7.2f,", pitch_kf);
	//HAL_UART_Transmit(&huart3, sbuf,8, HAL_MAX_DELAY);
	//sprintf(sbuf, "%7.2f,", yaw_gyro);
	//HAL_UART_Transmit(&huart3, sbuf,8, HAL_MAX_DELAY);
	HAL_UART_Transmit(&huart3, "\r\n", 2, HAL_MAX_DELAY);


    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{

  /* USER CODE BEGIN I2C2_Init 0 */

  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
  hi2c2.Init.ClockSpeed = 100000;
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c2.Init.OwnAddress1 = 0;
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c2.Init.OwnAddress2 = 0;
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}

/**
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
  huart3.Init.BaudRate = 115200;
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart3) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
